/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useMemo } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useStore } from "./store";
import { Pane } from "tweakpane";
export function Fred2(props) {
	const group = useRef();
	const { nodes, materials, animations } = useGLTF(
		"./../AnimatingTestIdle.gltf"
	);
	const { actions, names, mixer } = useAnimations(animations, group);
	//Use Store
	const aI = useStore((state) => state.aI);
	const isPlaying = useStore((state) => state.isPlaying);
	const isPaused = useStore((state) => state.isPaused);
	const setAnimationsArray = useStore((state) => state.updateAnimationArray);
	// const currentAnimation = new Promise ({ useStore((state) => state.animationsArray[aI]);})
	//TODO: Slider for .timescale with tweakpane as Pane
	const pane = new Pane();
	const PARAMS = {
		timescale: 1,
		play: isPlaying,
		paused: isPaused,
		// currentAnimation: currentAnimation?.toString(),
	};
	pane.addInput(PARAMS, "timescale", { min: 0, max: 1, step: 0.01 });
	pane.addMonitor(PARAMS, "play");
	pane.addMonitor(PARAMS, "paused");
	// pane.addMonitor(PARAMS, "currentAnimation");
	//Solves Problem with infinte renders of Animations Array and successfully passes to store
	useMemo(
		() => Promise.resolve(names).then((results) => setAnimationsArray(results)),
		[names, setAnimationsArray]
	);
	// Handle Animation Loop
	//TODO: make actions a promise to initiate timescale and current animation
	// useEffect(() => {
	// actions[names[aI]].timeScale = PARAMS.props.timescale;
	// }, PARAMS.props.timescale);
	useEffect(() => {
		mixer.stopAllAction();
		isPlaying ? actions[names[aI]].play() : actions[names[aI]].reset();
	}, [isPlaying, aI, actions, names, mixer]);
	useEffect(() => {
		isPaused
			? (actions[names[aI]].timeScale = 0)
			: (actions[names[aI]].timeScale = 1);
	}, [isPaused, aI, actions, names]);
	useEffect(() => {
		console.log("updated position");
	}, nodes.mixamorig1Hips.position);

	// console.log(nodes.mixamorig1Hips.position);
	return (
		<group ref={group} {...props} dispose={null}>
			<primitive object={nodes.mixamorig1Hips} />
			<primitive object={nodes.Ctrl_Master} />
			<primitive object={nodes.Ctrl_ArmPole_IK_Left} />
			<primitive object={nodes.Ctrl_Hand_IK_Left} />
			<primitive object={nodes.Ctrl_ArmPole_IK_Right} />
			<primitive object={nodes.Ctrl_Hand_IK_Right} />
			<primitive object={nodes.Ctrl_Foot_IK_Left} />
			<primitive object={nodes.Ctrl_LegPole_IK_Left} />
			<primitive object={nodes.Ctrl_Foot_IK_Right} />
			<primitive object={nodes.Ctrl_LegPole_IK_Right} />
			<skinnedMesh
				frustumCulled={false}
				geometry={nodes.Fred.geometry}
				material={materials.Fred}
				skeleton={nodes.Fred.skeleton}
			/>
			<gridHelper args={[10, 10, `white`, `gray`]} position={[0, 0, 0]} />
		</group>
	);
}

useGLTF.preload("/AnimatingTestIdle.gltf");
