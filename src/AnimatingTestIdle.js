/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useMemo, useCallback } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useStore } from "./store";

export function Fred2(props) {
	const group = useRef();
	const { nodes, materials, animations } = useGLTF(
		"./../AnimatingTestIdle.gltf"
	);
	const { actions, names, mixer } = useAnimations(animations, group);

	//Use Store
	const aI = useStore((state) => state.aI);
	const isPlaying = useStore((state) => state.isPlaying);
	const isPaused = useStore((state) => state.isPaused);
	const setAnimationsArray = useStore((state) => state.updateAnimationArray);
	const arr = useStore((state) => state.animationsArray);
	// Put AnimationClip: name into an array of strings to be used in store
	const updateArr = [...names];
	// TODO: SET animatations array in store to use ...names
	// without rerendering infinte fucking times
	//
	// Have tried useMemo, useEffect, useCallback. none of them consitently get the values
	// into the state.animationsArray without infinite rerenders
	//
	useEffect(() => {
		// console.log([...updateArr]);
		// WARNING!!! UNCOMMENT NEXT LINE AT OWN RISK: WILL RESULT IN INFINTE LOOP
		// setAnimationsArray(...updateArr);
		console.log(".....Fred2.....");
		console.log(updateArr);
		console.log(".............");
	}, [updateArr]);

	// Handle Animation Loop
	useEffect(() => {
		mixer.stopAllAction();
		isPlaying ? actions[names[aI]].play() : actions[names[aI]].reset();
	}, [isPlaying, aI, actions, names, mixer]);
	useEffect(() => {
		isPaused
			? (actions[names[aI]].timeScale = 0)
			: (actions[names[aI]].timeScale = 1);
	}, [isPaused, aI, actions, names]);

	return (
		<group ref={group} {...props} dispose={null}>
			<primitive object={nodes.mixamorig1Hips} />
			<primitive object={nodes.Ctrl_Master} />
			<primitive object={nodes.Ctrl_ArmPole_IK_Left} />
			<primitive object={nodes.Ctrl_Hand_IK_Left} />
			<primitive object={nodes.Ctrl_ArmPole_IK_Right} />
			<primitive object={nodes.Ctrl_Hand_IK_Right} />
			<primitive object={nodes.Ctrl_Foot_IK_Left} />
			<primitive object={nodes.Ctrl_LegPole_IK_Left} />
			<primitive object={nodes.Ctrl_Foot_IK_Right} />
			<primitive object={nodes.Ctrl_LegPole_IK_Right} />
			<skinnedMesh
				frustumCulled={false}
				geometry={nodes.Fred.geometry}
				material={materials.Fred}
				skeleton={nodes.Fred.skeleton}
			/>
		</group>
	);
}

useGLTF.preload("/AnimatingTestIdle.gltf");
