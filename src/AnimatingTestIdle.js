/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useMemo } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useStore } from "./store";
import { Gui } from "./GUI";
import * as THREE from "three";
export function Fred2(props) {
	//Renders TweakpaneGuiRight
	Gui();

	const group = useRef();
	const { nodes, materials, animations } = useGLTF(
		"./../AnimatingTestIdle.gltf"
	);
	const { actions, names, mixer } = useAnimations(animations, group);
	//Use Store
	const aI = useStore((state) => state.aI);
	let isPlaying = useStore((state) => state.isPlaying);
	let isPaused = useStore((state) => state.isPaused);
	// const setIsPlaying = useStore((state) => state.setIsPlaying);
	// const setIsPaused = useStore((state) => state.setIsPaused);
	const setAnimationsArray = useStore((state) => state.updateAnimationArray);
	// const currentAnimation = useStore((state) => state.animationsArray[aI]);
	const timescale = useStore((state) => state.timescale);
	const loop = useStore((state) => state.loop);
	const bounce = useStore((state) => state.bounce);

	//Solves Problem with infinte renders of Animations Array and successfully passes to store
	useMemo(
		() => Promise.resolve(names).then((results) => setAnimationsArray(results)),
		[names, setAnimationsArray]
	);

	// Handle Animation Loop
	useEffect(() => {
		console.log(mixer.time);
	}, [mixer.time]);
	useEffect(() => {
		bounce
			? actions[names[aI]].setLoop(THREE.LoopPingPong)
			: actions[names[aI]].setLoop(THREE.LoopRepeat);
	}, [bounce, aI, actions, names, mixer]);
	useEffect(() => {
		loop
			? actions[names[aI]].setLoop(THREE.LoopRepeat)
			: actions[names[aI]].setLoop(THREE.LoopOnce);
	}, [loop, aI, actions, names, mixer]);
	useEffect(() => {
		actions[names[aI]].timeScale = timescale;
	}, [timescale, aI, actions, names, mixer]);
	useEffect(() => {
		// mixer.stopAllAction();
		isPlaying ? actions[names[aI]].play() : actions[names[aI]].reset();
	}, [isPlaying, aI, actions, names, mixer]);
	useEffect(() => {
		isPaused
			? (actions[names[aI]].timeScale = 0)
			: (actions[names[aI]].timeScale = timescale);
	}, [timescale, isPaused, aI, actions, names]);

	// console.log(nodes.mixamorig1Hips.position);
	return (
		<group ref={group} {...props} dispose={null}>
			<primitive object={nodes.mixamorig1Hips} />
			<primitive object={nodes.Ctrl_Master} />
			<primitive object={nodes.Ctrl_ArmPole_IK_Left} />
			<primitive object={nodes.Ctrl_Hand_IK_Left} />
			<primitive object={nodes.Ctrl_ArmPole_IK_Right} />
			<primitive object={nodes.Ctrl_Hand_IK_Right} />
			<primitive object={nodes.Ctrl_Foot_IK_Left} />
			<primitive object={nodes.Ctrl_LegPole_IK_Left} />
			<primitive object={nodes.Ctrl_Foot_IK_Right} />
			<primitive object={nodes.Ctrl_LegPole_IK_Right} />
			<skinnedMesh
				frustumCulled={false}
				geometry={nodes.Fred.geometry}
				material={materials.Fred}
				skeleton={nodes.Fred.skeleton}
			/>
			<gridHelper args={[10, 10, `white`, `gray`]} position={[0, 0, 0]} />
		</group>
	);
}

useGLTF.preload("/AnimatingTestIdle.gltf");
