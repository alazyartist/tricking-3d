/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect, useMemo } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { useStore } from "../store/store";
import * as THREE from "three";
import FrankAnim from "../data/Frank.gltf";
import { AnimationUtils, Clock } from "three";
export function Frank({ ...props }) {
	const group = useRef();
	const { nodes, materials, animations } = useGLTF(FrankAnim);
	const { actions, names, mixer } = useAnimations(animations, group);

	//Use Store
	const aI = useStore((state) => state.aI);
	let isPlaying = useStore((state) => state.isPlaying);
	let isPaused = useStore((state) => state.isPaused);
	const setAnimationsArray = useStore((state) => state.updateAnimationArray);
	const timescale = useStore((state) => state.timescale);
	const loop = useStore((state) => state.loop);
	const bounce = useStore((state) => state.bounce);
	const currentAnim = useStore((state) => state.currentAnim);
	const start = useStore((state) => state.start);
	const end = useStore((state) => state.end);
	const setClipDuration = useStore((state) => state.setClipDuration);
	const setCurrentTime = useStore((state) => state.setCurrentTime);
	const setSliderStart = useStore((state) => state.setSliderStart);
	const setSliderEnd = useStore((state) => state.setSliderEnd);

	useEffect(() => setSliderStart(start), [setSliderStart, start]);
	useEffect(() => setSliderEnd(end), [setSliderEnd, end]);

	//Solves Problem with infinte renders of Animations Array and successfully passes to store
	useMemo(
		() => Promise.resolve(names).then((results) => setAnimationsArray(results)),
		[names, setAnimationsArray]
	);

	// Handle Animation Loop
	//bounce
	useEffect(() => {
		bounce
			? actions[currentAnim].setLoop(THREE.LoopPingPong)
			: actions[currentAnim].setLoop(THREE.LoopRepeat);
	}, [bounce, aI, actions, names, mixer, currentAnim]);
	//loop
	useEffect(() => {
		loop
			? actions[currentAnim].setLoop(THREE.LoopRepeat)
			: actions[currentAnim].setLoop(THREE.LoopOnce);
	}, [loop, aI, actions, names, mixer, currentAnim]);
	//Timescale (SlowMo, FullSpeed, Timeslider) functionality
	useEffect(() => {
		actions[currentAnim].timeScale = timescale;
	}, [timescale, actions, mixer, currentAnim]);

	// Play Pause functionality
	useEffect(() => {
		isPaused
			? (actions[currentAnim].timeScale = 0)
			: (actions[currentAnim].timeScale = timescale);
	}, [timescale, isPaused, aI, actions, names, currentAnim]);

	// Get Clip Duration and set .startAt time
	useEffect(() => {
		const duration = actions[currentAnim].getClip().duration;
		const startHere = start * duration;

		isPlaying
			? mixer.setTime(100)
			: mixer.setTime(100);
	}, [isPlaying, aI, actions, names, mixer, currentAnim, start]);
	useFrame(() => {
    //console.log(mixer.time);
		setCurrentTime(actions[currentAnim].time);
	});

	useEffect(() => {
		const clipDuration = actions[currentAnim].getClip().duration;
		const startHere = start * clipDuration;
		const endHere = end * clipDuration;
		//console.log();
		const currentClip = actions[currentAnim].getClip();
		const newClip = AnimationUtils.subclip(currentClip, startHere, endHere);
		//console.log("newClip", newClip);

		//console.log("newTime", endHere - startHere);
		//console.log("startHere", startHere);
		//console.log("endHere", endHere);
		//console.log();

		//console.log("clock^");
		//console.log("time", actions[currentAnim].time);
		//console.log("duration", actions[currentAnim].getClip().duration);
		//console.log("newDuration");
		//console.log("div", end - start);
	}, [start, end, currentAnim]);
	useEffect(() => {
		setCurrentTime(actions[currentAnim].time);
		setClipDuration(actions[currentAnim].getClip().duration);
	}, [currentAnim, actions]);

	useEffect(() => {
		mixer.stopAllAction();
	}, [currentAnim]);
	useEffect(() => {
		const duration = actions[currentAnim].getClip().duration;
		const startHere = start * duration;
		//console.log("startHere", startHere);
		actions[currentAnim].startAt(startHere).play();
	}, [currentAnim, start]);

	return (
		<group ref={group} {...props} dispose={null}>
			<group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
				<primitive object={nodes.mixamorig1Hips} />
				<skinnedMesh
					frustumCulled={false}
					geometry={nodes.Skin.geometry}
					material={materials.Ch36_Body}
					skeleton={nodes.Skin.skeleton}
				/>
			</group>
		</group>
	);
}

useGLTF.preload("/Frank.gltf");
