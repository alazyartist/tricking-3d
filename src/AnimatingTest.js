/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState, useEffect } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
useGLTF.preload("../AnimatingTest.gltf");

export function Fred(props) {
	const group = useRef();
	const { nodes, materials, animations } = useGLTF("../AnimatingTest.gltf");
	const { actions } = useAnimations(animations, group);

	//UseStates to move things around
	const [trickCount, setTrickCount] = useState(props.trickCount);
	const [currentAnimation, setCurrentAnimation] = useState(
		props.currentAnimation
	);
	const [animationArray, setAnimationArray] = useState(actions);
	//Variables to pass around
	let animationsArr = [actions.BKick, actions.Backflip];
	let trickCounter = animationsArr.length;
	let indexVa = props.index;
	//Use Effect Functions
	useEffect(() => {
		setAnimationArray(actions);
		console.log("Pass arr to Scene");
	}, [props.handleAnimationArray, actions, animationArray, props]);

	useEffect(() => {
		setCurrentAnimation(animationsArr[indexVa]);
		console.log(currentAnimation);
	}, [animationsArr[indexVa], indexVa, currentAnimation, props]);
	useEffect(() => {
		setTrickCount(trickCounter);
	}, [props.handleTrickCount, trickCount, trickCounter, props]);

	//AnimationPlayer
	if (actions.BKick !== undefined) {
		let indexV = props.index;

		animationsArr[indexV].play();
		props.playing
			? (animationsArr[indexV].timeScale = 1)
			: (animationsArr[indexV].timeScale = 0);
	}

	//Fred
	return (
		<group ref={group} {...props} dispose={null}>
			<group rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
				<primitive object={nodes.mixamorig1Hips} />
				<skinnedMesh
					geometry={nodes.Fred.geometry}
					material={materials.Fred}
					skeleton={nodes.Fred.skeleton}
				/>
			</group>
		</group>
	);
}
